
``tox`` helps you to automate virtualenv creation, python project packaging and testing in multiple virtualenv environments.  

Install
=============

Use one of the following commands::

   pip install tox  # or 
   easy_install tox 

Features:
=============

* `tox` command line tool, driven by a simple ``tox.ini`` per-project 
  configuration file and command line options. 

* automatically creates virtual environments

* test-tool agnostic: runs nose, unittest or py.test style tests in a uniform manner

* cross-Python compatible: handles Python2.4 up to Python3.1, Jython and pypy-c 

Basic Example 
================================

Put basic information about your project and the test environments you
want your project to run in into a ``tox.ini`` file::

    # content of: tox.ini
    [test]
    command=py.test --junitxml={envname}.xml 
    [testenv:py25]
    python=python2.5
    [testenv:py26]
    python=python2.6

To package, install and test the project, you can type at the command prompt
(in your project root directory where your ``tox.ini`` and ``setup.py`` file should reside)::

    tox 

This will sdist-package your current project, create virtualenv_
Environments, install the sdist-package into the environments and run
the specified command in them - in this case py.test_ which 
creates XML result files which can be further processed 
by Continous Integration Servers.  Sometimes it is useful to 
rather run from a Python script because they work across
Win32 and Linux uniformly::

    import tox
    tox.cmdline()

.. _Python: http://www.python.org
.. _virtualenv: http://pypi.python.org/pypi/virtualenv
.. _`py.test`: http://pytest.org 
.. _`nose`: http://pypi.python.org/pypi/nose

.. _`Holger Krekel`: http://twitter.com/hpk42

.. toctree::
   :hidden:

   implementation
   feature
   usecases 
